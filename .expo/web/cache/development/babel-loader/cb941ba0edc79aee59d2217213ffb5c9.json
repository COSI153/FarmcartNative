{"ast":null,"code":"var _jsxFileName = \"/Users/yuchenxu/Desktop/codecanyon-RWquqpyI-food-delivery-react-native-template/FoodDelivery_Expo/src/components/modals/InfoModal.js\";\nimport React from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../buttons/Button\";\nimport Icon from \"../icon/Icon\";\nimport Colors from \"../../theme/colors\";\nimport Layout from \"../../theme/layout\";\nvar styles = StyleSheet.create({\n  modalWrapper: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.52)'\n  },\n  modalContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n    width: Layout.SCREEN_WIDTH - 3 * Layout.LARGE_MARGIN,\n    borderRadius: 4,\n    backgroundColor: Colors.background\n  },\n  title: {\n    paddingVertical: 8,\n    fontWeight: '700',\n    fontSize: 18,\n    color: Colors.primaryText\n  },\n  message: {\n    marginBottom: 16,\n    padding: 8,\n    fontWeight: '400',\n    color: Colors.secondaryText,\n    textAlign: 'center'\n  },\n  buttonContainer: {\n    paddingHorizontal: 12,\n    width: '100%'\n  }\n});\n\nvar InfoModal = function InfoModal(_ref) {\n  var message = _ref.message,\n      _ref$onRequestClose = _ref.onRequestClose,\n      onRequestClose = _ref$onRequestClose === void 0 ? function () {} : _ref$onRequestClose,\n      iconName = _ref.iconName,\n      iconColor = _ref.iconColor,\n      _ref$statusBarColor = _ref.statusBarColor,\n      statusBarColor = _ref$statusBarColor === void 0 ? 'rgba(0, 0, 0, 0.52)' : _ref$statusBarColor,\n      title = _ref.title,\n      buttonTitle = _ref.buttonTitle,\n      onButtonPress = _ref.onButtonPress,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible;\n  return React.createElement(Modal, {\n    animationType: \"none\",\n    transparent: true,\n    visible: visible,\n    onRequestClose: onRequestClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    }\n  }, React.createElement(StatusBar, {\n    backgroundColor: statusBarColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    }\n  }), React.createElement(View, {\n    style: styles.modalWrapper,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    }\n  }, React.createElement(View, {\n    style: styles.modalContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    }\n  }, React.createElement(Icon, {\n    name: iconName,\n    size: 72,\n    color: iconColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    }\n  }, title), message !== '' && message !== undefined && React.createElement(Text, {\n    style: styles.message,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    }\n  }, message), React.createElement(View, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    }\n  }, React.createElement(Button, {\n    onPress: onButtonPress,\n    title: buttonTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    }\n  })))));\n};\n\nexport default InfoModal;","map":{"version":3,"sources":["/Users/yuchenxu/Desktop/codecanyon-RWquqpyI-food-delivery-react-native-template/FoodDelivery_Expo/src/components/modals/InfoModal.js"],"names":["React","Button","Icon","Colors","Layout","styles","StyleSheet","create","modalWrapper","flex","justifyContent","alignItems","backgroundColor","modalContainer","padding","width","SCREEN_WIDTH","LARGE_MARGIN","borderRadius","background","title","paddingVertical","fontWeight","fontSize","color","primaryText","message","marginBottom","secondaryText","textAlign","buttonContainer","paddingHorizontal","InfoModal","onRequestClose","iconName","iconColor","statusBarColor","buttonTitle","onButtonPress","visible","undefined"],"mappings":"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","sourcesContent":["/**\n * Food Delivery - React Native Template\n *\n * @format\n * @flow\n */\n\n// import dependencies\nimport React from 'react';\nimport {Modal, StatusBar, StyleSheet, Text, View} from 'react-native';\n\n// import components\nimport Button from '../buttons/Button';\nimport Icon from '../icon/Icon';\n\n// import colors, layout\nimport Colors from '../../theme/colors';\nimport Layout from '../../theme/layout';\n\n// InfoModal Config\n\n// InfoModal Styles\nconst styles = StyleSheet.create({\n  modalWrapper: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.52)',\n  },\n  modalContainer: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 20,\n    width: Layout.SCREEN_WIDTH - 3 * Layout.LARGE_MARGIN,\n    borderRadius: 4,\n    backgroundColor: Colors.background,\n  },\n  title: {\n    paddingVertical: 8,\n    fontWeight: '700',\n    fontSize: 18,\n    color: Colors.primaryText,\n  },\n  message: {\n    marginBottom: 16,\n    padding: 8,\n    fontWeight: '400',\n    color: Colors.secondaryText,\n    textAlign: 'center',\n  },\n  buttonContainer: {\n    paddingHorizontal: 12,\n    width: '100%',\n  },\n});\n\n// InfoModal Props\ntype Props = {\n  message: string,\n  onRequestClose: () => {},\n  iconName: string,\n  iconColor: string,\n  statusBarColor: string,\n  title: string,\n  buttonTitle: string,\n  onButtonPress: () => {},\n  visible: boolean,\n};\n\n// InfoModal\nconst InfoModal = ({\n  message,\n  onRequestClose = () => {},\n  iconName,\n  iconColor,\n  statusBarColor = 'rgba(0, 0, 0, 0.52)',\n  title,\n  buttonTitle,\n  onButtonPress,\n  visible = false,\n}: Props) => (\n  <Modal\n    animationType=\"none\"\n    transparent\n    visible={visible}\n    onRequestClose={onRequestClose}>\n    <StatusBar backgroundColor={statusBarColor} />\n    <View style={styles.modalWrapper}>\n      <View style={styles.modalContainer}>\n        <Icon name={iconName} size={72} color={iconColor} />\n        <Text style={styles.title}>{title}</Text>\n\n        {message !== '' && message !== undefined && (\n          <Text style={styles.message}>{message}</Text>\n        )}\n\n        <View style={styles.buttonContainer}>\n          <Button onPress={onButtonPress} title={buttonTitle} />\n        </View>\n      </View>\n    </View>\n  </Modal>\n);\n\nexport default InfoModal;\n"]},"metadata":{},"sourceType":"module"}